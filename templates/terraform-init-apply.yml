# Terraform Infrastructure Template
# This template initializes and applies Terraform configurations

parameters:
- name: terraformVersion
  type: string
  default: 'latest'
- name: workingDirectory
  type: string
  default: '$(System.DefaultWorkingDirectory)'
- name: backendServiceConnection
  type: string
- name: backendResourceGroupName
  type: string
- name: backendStorageAccountName
  type: string
- name: backendContainerName
  type: string
  default: 'tfstate'
- name: backendKey
  type: string
- name: environmentServiceConnection
  type: string
- name: planOnly
  type: boolean
  default: false
- name: destroyMode
  type: boolean
  default: false
- name: additionalArgs
  type: string
  default: ''

stages:
- stage: TerraformPlan
  displayName: 'Terraform Plan'
  jobs:
  - job: Plan
    displayName: 'Terraform Plan Job'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: '${{ parameters.terraformVersion }}'
    
    - task: TerraformTaskV3@3
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '${{ parameters.workingDirectory }}'
        backendServiceArm: '${{ parameters.backendServiceConnection }}'
        backendAzureRmResourceGroupName: '${{ parameters.backendResourceGroupName }}'
        backendAzureRmStorageAccountName: '${{ parameters.backendStorageAccountName }}'
        backendAzureRmContainerName: '${{ parameters.backendContainerName }}'
        backendAzureRmKey: '${{ parameters.backendKey }}'
    
    - task: TerraformTaskV3@3
      displayName: 'Terraform Validate'
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '${{ parameters.workingDirectory }}'
    
    - task: TerraformTaskV3@3
      displayName: 'Terraform Plan'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '${{ parameters.workingDirectory }}'
        environmentServiceNameAzureRM: '${{ parameters.environmentServiceConnection }}'
        commandOptions: '-out=tfplan ${{ parameters.additionalArgs }}'
        ${{ if eq(parameters.destroyMode, true) }}:
          commandOptions: '-destroy -out=tfplan ${{ parameters.additionalArgs }}'
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Terraform Plan'
      inputs:
        PathtoPublish: '${{ parameters.workingDirectory }}/tfplan'
        ArtifactName: 'terraform-plan'

- ${{ if eq(parameters.planOnly, false) }}:
  - stage: TerraformApply
    displayName: 'Terraform Apply'
    dependsOn: TerraformPlan
    condition: succeeded()
    jobs:
    - deployment: Apply
      displayName: 'Terraform Apply Job'
      pool:
        vmImage: 'ubuntu-latest'
      environment: 'infrastructure'
      strategy:
        runOnce:
          deploy:
            steps:
            - task: TerraformInstaller@0
              displayName: 'Install Terraform'
              inputs:
                terraformVersion: '${{ parameters.terraformVersion }}'
            
            - task: DownloadBuildArtifacts@0
              displayName: 'Download Terraform Plan'
              inputs:
                buildType: 'current'
                downloadType: 'single'
                artifactName: 'terraform-plan'
                downloadPath: '${{ parameters.workingDirectory }}'
            
            - task: TerraformTaskV3@3
              displayName: 'Terraform Init'
              inputs:
                provider: 'azurerm'
                command: 'init'
                workingDirectory: '${{ parameters.workingDirectory }}'
                backendServiceArm: '${{ parameters.backendServiceConnection }}'
                backendAzureRmResourceGroupName: '${{ parameters.backendResourceGroupName }}'
                backendAzureRmStorageAccountName: '${{ parameters.backendStorageAccountName }}'
                backendAzureRmContainerName: '${{ parameters.backendContainerName }}'
                backendAzureRmKey: '${{ parameters.backendKey }}'
            
            - task: TerraformTaskV3@3
              displayName: 'Terraform Apply'
              inputs:
                provider: 'azurerm'
                command: 'apply'
                workingDirectory: '${{ parameters.workingDirectory }}'
                environmentServiceNameAzureRM: '${{ parameters.environmentServiceConnection }}'
                commandOptions: 'tfplan'
