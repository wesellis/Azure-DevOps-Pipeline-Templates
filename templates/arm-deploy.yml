# ARM Template Deployment Template
# This template deploys Azure Resource Manager (ARM) templates

parameters:
- name: azureSubscription
  type: string
- name: resourceGroupName
  type: string
- name: location
  type: string
  default: 'East US'
- name: templateFile
  type: string
  default: 'azuredeploy.json'
- name: parametersFile
  type: string
  default: 'azuredeploy.parameters.json'
- name: deploymentMode
  type: string
  default: 'Incremental'
- name: deploymentName
  type: string
  default: 'ARMDeployment-$(Build.BuildNumber)'
- name: overrideParameters
  type: string
  default: ''
- name: validateOnly
  type: boolean
  default: false
- name: createResourceGroup
  type: boolean
  default: true
- name: enableDeploymentDebug
  type: boolean
  default: false

stages:
- stage: Validate
  displayName: 'Validate ARM Template'
  jobs:
  - job: ValidateTemplate
    displayName: 'Validate Template Job'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - task: AzureCLI@2
      displayName: 'Validate ARM Template Syntax'
      inputs:
        azureSubscription: '${{ parameters.azureSubscription }}'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Validating ARM template syntax..."
          az deployment group validate \
            --resource-group ${{ parameters.resourceGroupName }} \
            --template-file ${{ parameters.templateFile }} \
            ${{ if ne(parameters.parametersFile, '') }}:
            --parameters @${{ parameters.parametersFile }} \
            ${{ if ne(parameters.overrideParameters, '') }}:
            --parameters ${{ parameters.overrideParameters }}
    
    - task: AzureResourceManagerTemplateDeployment@3
      displayName: 'Validate ARM Deployment'
      inputs:
        deploymentScope: 'Resource Group'
        azureResourceManagerConnection: '${{ parameters.azureSubscription }}'
        action: 'Create Or Update Resource Group'
        resourceGroupName: '${{ parameters.resourceGroupName }}'
        location: '${{ parameters.location }}'
        templateLocation: 'Linked artifact'
        csmFile: '${{ parameters.templateFile }}'
        ${{ if ne(parameters.parametersFile, '') }}:
          csmParametersFile: '${{ parameters.parametersFile }}'
        ${{ if ne(parameters.overrideParameters, '') }}:
          overrideParameters: '${{ parameters.overrideParameters }}'
        deploymentMode: 'Validation'
        deploymentName: '${{ parameters.deploymentName }}-Validation'

- ${{ if eq(parameters.validateOnly, false) }}:
  - stage: Deploy
    displayName: 'Deploy ARM Template'
    dependsOn: Validate
    condition: succeeded()
    jobs:
    - deployment: DeployARM
      displayName: 'Deploy ARM Template Job'
      pool:
        vmImage: 'ubuntu-latest'
      environment: 'infrastructure'
      strategy:
        runOnce:
          deploy:
            steps:
            - ${{ if eq(parameters.createResourceGroup, true) }}:
              - task: AzureCLI@2
                displayName: 'Create Resource Group'
                inputs:
                  azureSubscription: '${{ parameters.azureSubscription }}'
                  scriptType: 'bash'
                  scriptLocation: 'inlineScript'
                  inlineScript: |
                    echo "Creating resource group ${{ parameters.resourceGroupName }} in ${{ parameters.location }}"
                    az group create --name ${{ parameters.resourceGroupName }} --location "${{ parameters.location }}"
            
            - task: AzureResourceManagerTemplateDeployment@3
              displayName: 'Deploy ARM Template'
              inputs:
                deploymentScope: 'Resource Group'
                azureResourceManagerConnection: '${{ parameters.azureSubscription }}'
                action: 'Create Or Update Resource Group'
                resourceGroupName: '${{ parameters.resourceGroupName }}'
                location: '${{ parameters.location }}'
                templateLocation: 'Linked artifact'
                csmFile: '${{ parameters.templateFile }}'
                ${{ if ne(parameters.parametersFile, '') }}:
                  csmParametersFile: '${{ parameters.parametersFile }}'
                ${{ if ne(parameters.overrideParameters, '') }}:
                  overrideParameters: '${{ parameters.overrideParameters }}'
                deploymentMode: '${{ parameters.deploymentMode }}'
                deploymentName: '${{ parameters.deploymentName }}'
                ${{ if eq(parameters.enableDeploymentDebug, true) }}:
                  deploymentOutputs: 'armOutputs'
              name: 'deployARM'
            
            - ${{ if eq(parameters.enableDeploymentDebug, true) }}:
              - task: PowerShell@2
                displayName: 'Display ARM Outputs'
                inputs:
                  targetType: 'inline'
                  script: |
                    $armOutputs = '$(deployARM.armOutputs)' | ConvertFrom-Json
                    $armOutputs.PSObject.Properties | ForEach-Object {
                      Write-Host "Output: $($_.Name) = $($_.Value.value)"
                      Write-Host "##vso[task.setvariable variable=$($_.Name);isOutput=true]$($_.Value.value)"
                    }
                  pwsh: true
                name: 'armOutputs'
            
            - task: AzureCLI@2
              displayName: 'Verify Deployment'
              inputs:
                azureSubscription: '${{ parameters.azureSubscription }}'
                scriptType: 'bash'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  echo "Verifying deployment status..."
                  az deployment group show \
                    --name ${{ parameters.deploymentName }} \
                    --resource-group ${{ parameters.resourceGroupName }} \
                    --query "properties.provisioningState" \
                    --output tsv
                  
                  echo "Deployment completed successfully!"
                  
                  echo "Listing deployed resources..."
                  az resource list \
                    --resource-group ${{ parameters.resourceGroupName }} \
                    --output table

- stage: PostDeployment
  displayName: 'Post Deployment Validation'
  dependsOn: Deploy
  condition: succeeded()
  jobs:
  - job: PostDeployValidation
    displayName: 'Post Deployment Validation Job'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - task: AzureCLI@2
      displayName: 'Run Post-Deployment Tests'
      inputs:
        azureSubscription: '${{ parameters.azureSubscription }}'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Running post-deployment validation..."
          
          # Check resource group exists
          if az group show --name ${{ parameters.resourceGroupName }} > /dev/null 2>&1; then
            echo "✓ Resource group ${{ parameters.resourceGroupName }} exists"
          else
            echo "✗ Resource group ${{ parameters.resourceGroupName }} not found"
            exit 1
          fi
          
          # Check deployment status
          deploymentStatus=$(az deployment group show \
            --name ${{ parameters.deploymentName }} \
            --resource-group ${{ parameters.resourceGroupName }} \
            --query "properties.provisioningState" \
            --output tsv)
          
          if [ "$deploymentStatus" = "Succeeded" ]; then
            echo "✓ Deployment status: $deploymentStatus"
          else
            echo "✗ Deployment status: $deploymentStatus"
            exit 1
          fi
          
          # List and count resources
          resourceCount=$(az resource list \
            --resource-group ${{ parameters.resourceGroupName }} \
            --query "length(@)")
          
          echo "✓ Total resources deployed: $resourceCount"
          
          echo "Post-deployment validation completed successfully!"
