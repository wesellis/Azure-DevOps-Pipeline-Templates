# .NET Build and Deploy Template
# This template builds a .NET application and deploys it to Azure App Service

parameters:
- name: project
  type: string
  default: '**/*.csproj'
- name: buildConfiguration
  type: string
  default: 'Release'
- name: azureSubscription
  type: string
- name: appServiceName
  type: string
- name: resourceGroupName
  type: string
- name: dotnetVersion
  type: string
  default: '8.x'
- name: publishProfile
  type: string
  default: ''
- name: runTests
  type: boolean
  default: true

stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: Build
    displayName: 'Build Job'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET SDK ${{ parameters.dotnetVersion }}'
      inputs:
        packageType: 'sdk'
        version: '${{ parameters.dotnetVersion }}'
    
    - task: DotNetCoreCLI@2
      displayName: 'Restore packages'
      inputs:
        command: 'restore'
        projects: '${{ parameters.project }}'
    
    - task: DotNetCoreCLI@2
      displayName: 'Build application'
      inputs:
        command: 'build'
        projects: '${{ parameters.project }}'
        arguments: '--configuration ${{ parameters.buildConfiguration }} --no-restore'
    
    - ${{ if eq(parameters.runTests, true) }}:
      - task: DotNetCoreCLI@2
        displayName: 'Run tests'
        inputs:
          command: 'test'
          projects: '**/*Tests.csproj'
          arguments: '--configuration ${{ parameters.buildConfiguration }} --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory $(Agent.TempDirectory)'
      
      - task: PublishCodeCoverageResults@1
        displayName: 'Publish code coverage'
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
    
    - task: DotNetCoreCLI@2
      displayName: 'Publish application'
      inputs:
        command: 'publish'
        projects: '${{ parameters.project }}'
        arguments: '--configuration ${{ parameters.buildConfiguration }} --output $(Build.ArtifactStagingDirectory) --no-build'
        zipAfterPublish: true
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'

- stage: Deploy
  displayName: 'Deploy Stage'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: 'Deploy Job'
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            displayName: 'Download artifacts'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '$(System.ArtifactsDirectory)'
          
          - task: AzureWebApp@1
            displayName: 'Deploy to Azure App Service'
            inputs:
              azureSubscription: '${{ parameters.azureSubscription }}'
              appType: 'webApp'
              appName: '${{ parameters.appServiceName }}'
              resourceGroupName: '${{ parameters.resourceGroupName }}'
              package: '$(System.ArtifactsDirectory)/drop/*.zip'
              ${{ if ne(parameters.publishProfile, '') }}:
                deploymentMethod: 'runFromPackage'
